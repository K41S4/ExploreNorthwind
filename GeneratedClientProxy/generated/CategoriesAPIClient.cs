// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace ConcertAPI
{
    /// <summary> The CategoriesAPI service client. </summary>
    public partial class CategoriesAPIClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of CategoriesAPIClient. </summary>
        public CategoriesAPIClient() : this(new Uri(""), new ConcertAPIClientOptions())
        {
        }

        /// <summary> Initializes a new instance of CategoriesAPIClient. </summary>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public CategoriesAPIClient(Uri endpoint, ConcertAPIClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new ConcertAPIClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfCategoryDTO</c>:
        /// <code>{
        ///   categoryID: number, # Optional.
        ///   categoryName: string, # Optional.
        ///   description: string, # Optional.
        ///   picture: binary, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetAllCategoriesAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("CategoriesAPIClient.GetAllCategories");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAllCategoriesRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfCategoryDTO</c>:
        /// <code>{
        ///   categoryID: number, # Optional.
        ///   categoryName: string, # Optional.
        ///   description: string, # Optional.
        ///   picture: binary, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetAllCategories(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("CategoriesAPIClient.GetAllCategories");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAllCategoriesRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetPictureAsync(int? id = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("CategoriesAPIClient.GetPicture");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPictureRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetPicture(int? id = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("CategoriesAPIClient.GetPicture");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPictureRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> UpdatePictureAsync(RequestContent content, ContentType contentType, int? id = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("CategoriesAPIClient.UpdatePicture");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdatePictureRequest(content, contentType, id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response UpdatePicture(RequestContent content, ContentType contentType, int? id = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("CategoriesAPIClient.UpdatePicture");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdatePictureRequest(content, contentType, id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetAllCategoriesRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/CategoriesAPI/Category", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreateGetPictureRequest(int? id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/CategoriesAPI/Picture", false);
            if (id != null)
            {
                uri.AppendQuery("id", id.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "text/plain, application/json, text/json");
            return message;
        }

        internal HttpMessage CreateUpdatePictureRequest(RequestContent content, ContentType contentType, int? id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/CategoriesAPI/Picture", false);
            if (id != null)
            {
                uri.AppendQuery("id", id.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
